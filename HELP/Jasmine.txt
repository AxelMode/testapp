Jasmine
-------




=============================
Matchers incluidos en Jasmine
=============================

'toBe' -> matcher que compara mediante '==='

expect(a).toBe(b);
expect(a).not.toBe(null);

'toEqual' -> Matcher que funciona 

	'con literales'
	var a = 12;
	expect(a).toEqual(12);

	'con objetos'
	var foo = {
		a: 12,
		b: 34
	};
	var bar = {
		a: 12,
		b: 34
	};

	expect(foo).toEqual(bar);
	
'toMatch' -> para expresiones regulares.

	var message = "foo bar baz";
    expect(message).toMatch(/bar/);
    expect(message).toMatch("bar");
    expect(message).not.toMatch(/quux/);
	
'toBeDefined' -> compara con 'undefined'

	var a = {
      foo: "foo"
    };

    expect(a.foo).toBeDefined();
    expect(a.bar).not.toBeDefined();

'toBeUndefined' -> Compara contra 'undefined'

	var a = {
      foo: "foo"
    };

    expect(a.foo).not.toBeUndefined();
    expect(a.bar).toBeUndefined();
  });
  
'toBeNull' -> Compara contra null
	
	var a = null;
    var foo = "foo";

    expect(null).toBeNull();
    expect(a).toBeNull();
    expect(foo).not.toBeNull();


------- Aclaración javascript -----------------

Javascript tiene, entre sus tipos de datos, soporte para valores booleanos (Boolean Object),
los cuales pueden corresponder con true o false.
Estos valores se asignan de forma explícita mediante el constructor Boolean:

var foo = new Boolean( 'true' );

Además de este tipo, cada elemento del lenguaje posée también un valor booleano intrínseco-primitivo (Boolean value) 
que conocemos como verdadero (truthy) o falso (falsy) dependiendo del mismo.

Este tipo de valor, completamente diferente al del objeto anterior, 
puede determinar el comportamiento de los condicionales e igualdades si no son tenidos en cuenta.

Es importante no confundir los valores booleanos primitivos con los valores del objeto booleano.
Cualquier objeto cuyo valor no es undefined o null, incluyendo los Boolean Object cuyo valor es false,
se evalúan como true cuando son comparados con otro término.

x = new Boolean(false); // Boolean Object
if( x ){
  // La condición se cumple porque x ha sido definida
  // con un valor verdadero (truthy)
}

Este comportamiento, sin embargo, no se aplica a la primitiva boolenana:

x = false; // Primitive boolean value
if( x ){
  // La condición no se cumple porque x aunque se ha definido
  // posée un valor falsy
}
	
Falsy values
-------------
Los siguientes valores evalúan siempre como false en una comparación.

var a = 0; // (cero) -> Number
var b = NaN; // (Not a Number) -> Number
var c = ""; // (cadena vacía) -> String
var d = false; // -> Boolean
var e = null; // -> Object
var f = undefined; // -> Undefined
	
Truthy values
-------------
Cualquier otro valor diferente de los anteriores, es considerado como verdadero (truthy),
incluído Infinity (otro número especial como NaN), “0” (cero entrecomillado), “false” (false entrecomillado),
funciones vacías, arrays vacíos y objetos vacíos:

var t = Infinity; // -> Number
var u = "0"; // -> String
var v = "false"; // -> String
var x = function(){}; // -> Function
var y = []; // -> Object (Array)
var z = {}; // -> Object

------- Fin aclaración javascript -----------------
	
'toBeTruthy' -> Permite comprobar si una variable evalua a Truthy en su valor intrínseco primitivo.

	//foo = "foo" pero a = undefined.
	var a, foo = "foo";

    expect(foo).toBeTruthy(); foo = "foo" -> tiene valor asignado != (0, NaN, "", false, null, undefined) -> es Truthy
    expect(a).not.toBeTruthy(); a = undefined -> tiene un valor por defecto no admitido como truthy por eso ha de negarse para que evalue a cierto.
	
'toBeFalsy' -> Permite comprobar si una variable evalua a Falsy en su valor intrínseco primitivo.

	var a, foo = "foo";

    expect(a).toBeFalsy(); a = undefined por lo que su valor intrinseco primitivo es falsy.
    expect(foo).not.toBeFalsy(); foo = "foo" por lo que su valor intrinseco primitivo es truty.
	
'toContain'	-> Permite verificar si un valor se encuentra o no en un array.

	var a = ["foo", "bar", "baz"];

    expect(a).toContain("bar");
    expect(a).not.toContain("quux");
	
'toBeLessThan' -> Comparador matemático "<"

	var pi = 3.1415926,
    e = 2.78;

    expect(pi).toBeGreaterThan(e);
    expect(e).not.toBeGreaterThan(pi);

'toBeCloseTo' -> Comparador matemático con precisión.

	var pi = 3.1415926,
    e = 2.78;

    expect(pi).not.toBeCloseTo(e, 2);
    expect(pi).toBeCloseTo(e, 0);

'toThrow' -> Permite testear si una función lanza una excepción.

	var foo = function() {
      return 1 + 2;
    };
    var bar = function() {
      return a + 1;
    };

    expect(foo).not.toThrow();
    expect(bar).toThrow();
	
'toThrowError' -> matcher para testear una excepción especifica.

	var foo = function() {
      throw new TypeError("foo bar baz");
    };

    expect(foo).toThrowError("foo bar baz");
    expect(foo).toThrowError(/bar/);
    expect(foo).toThrowError(TypeError);
    expect(foo).toThrowError(TypeError, "foo bar baz");
	
-------------------------------------------------------------------------------------------------------------------------

Agrupando pruebas relacionadas.

La función 'describe' nos sirve para agrupar specificaciones relacionadas.

describe("A spec", function() {
  it("is just a function, so it can contain any code", function() {
    var foo = 0;
    foo += 1;

    expect(foo).toEqual(1);
  });

  it("can have more than one expectation", function() {
    var foo = 0;
    foo += 1;

    expect(foo).toEqual(1);
    expect(true).toEqual(true);
  });
});

Dentro de la función 'describe' podemos utilizar, definir variables y declarar funciones.

 beforeEach(function() { --> Se ejecutará antes de ejecutar cada uno de los test dentro del 'describe'.
    foo += 1;
  });
  
  afterEach(function() { --> Se ejecutará después de ejecutar cada uno de los test dentro del 'describe'.
    foo = 0;
  });
  
  beforeAll(function() { --> Se ejecutará una única vez antes de los tests dentro de 'describe'.
    foo = 1;
  });

  afterAll(function() { --> Se ejecutará una única vez una vez finalizados los tests dentro de 'describe'.
    foo = 0;
  });

La palabra reservada 'this'

	Una forma de compartir variables entre beforeEach, it y afterEach es a través de la palabra reservada this.
	Cada test beforeEach / it / afterEach tiene el objeto this como el mismo objeto vacio que vuelve a setearse
	a vacío en el siguiente test (beforeEach / it / afterEach).
	

Encadenando bloques 'describe'
------------------------------

Las llamadas a describe pueden encadenarse con especificaciones definidas en cualquier nivel.
Esto permite que una suite esté compuesta por un árbol de funciones. Antes de que una especificacion se
ejecute, Jasmine desciende en el arbol ejecutando en orden cada función 'beforeEach'. Después de que 
la especificación se haya ejecutado, Jasmine pasa por las funciones afterEach de forma similar.

describe("A spec", function() {
  var foo;

  beforeEach(function() {
    foo = 0;
    foo += 1;
  });

  afterEach(function() {
    foo = 0;
  });

  it("is just a function, so it can contain any code", function() {
    expect(foo).toEqual(1);
  });

  it("can have more than one expectation", function() {
    expect(foo).toEqual(1);
    expect(true).toEqual(true);
  });

  describe("nested inside a second describe", function() {
    var bar;

    beforeEach(function() {
      bar = 1;
    });

    it("can reference both scopes as needed", function() {
      expect(foo).toEqual(bar);
    });
  });
});

-------
Espías!
-------

Jasmine tiene funciones de test doble llamadas 'spies'.
Un espía puede sustituir a cualquier función y rastrear las llamadas a esta y sus argumentos.
Un espía únicamente existe en un bloque 'it' o 'describe' en el que está definido y será
eliminado después de cada especificación.

El matcher 'toHaveBeenCalled' devolverá true si el espia fue llamado.
El matcher 'toHaveBeenCalledWith' devolverá true si la lista de argumentos encaja con alguno de las llamadas al espía.

describe("A spy", function() {
  var foo, bar = null;

  beforeEach(function() {
    foo = {
      setBar: function(value) {
        bar = value;
      }
    };

    spyOn(foo, 'setBar'); --> Se define el espia sobre la llamada al método setBar del objeto foo.

    foo.setBar(123); --> Se setea Bar al valor 123.
    foo.setBar(456, 'another param'); --> Se setea Bar al valor 456 + otro parámetro.
  });

  it("tracks that the spy was called", function() {
    expect(foo.setBar).toHaveBeenCalled(); -> Cierto si en alguna ocasion se ha llamado a setBar.
  });

  it("tracks all the arguments of its calls", function() {
    expect(foo.setBar).toHaveBeenCalledWith(123); --> Cierto si en alguna ocasion se ha llamado a setBar pasandole el valor 123.
    expect(foo.setBar).toHaveBeenCalledWith(456, 'another param'); --> Cierto si en alguna ocasión se ha llamado a setBar con el valor 456 y más parámetros.
  });

  it("stops all execution on a function", function() {
    expect(bar).toBeNull();
  });
});

and.callThrough
---------------

	Encadenando al espía con 'and.callThrough', éste seguirá traqueando todas las llamadas pero además, delegará a la implementación actual.
	
	describe("A spy, when configured to call through", function() {
	  var foo, bar, fetchedBar;

	  beforeEach(function() {
		foo = {
		  setBar: function(value) {
			bar = value;
		  },
		  getBar: function() {
			return bar;
		  }
		};

		spyOn(foo, 'getBar').and.callThrough();

		foo.setBar(123);
		fetchedBar = foo.getBar();
	  });

	  it("tracks that the spy was called", function() {
		expect(foo.getBar).toHaveBeenCalled();
	  });

	  it("should not affect other functions", function() {
		expect(bar).toEqual(123);
	  });

	  it("when called returns the requested value", function() {
		expect(fetchedBar).toEqual(123);
	  });
	});
	
	
and.returnValue
---------------

	Encadenando al espía 'and.returnValue', todas las llamadas a la función devolverán un valor específico.
	
	spyOn(foo, "getBar").and.returnValue(745);
	

and.callFake
------------

	Encadenando al espía 'and.callFake' todas las llamadas al espía delegarán a la función proporcionada.
	
	spyOn(foo, "getBar").and.callFake(function(arguments, can, be, received) {
      return 1001;
    });

and.throwError
--------------

	Encadenando al espía 'and.throwError', todas las llamadas al espía lanzarán el valor especificado como error.
	
	describe("A spy, when configured to throw an error", function() {
	  var foo, bar;

	  beforeEach(function() {
		foo = {
		  setBar: function(value) {
			bar = value;
		  }
		};

		spyOn(foo, "setBar").and.throwError("quux"); --> Cuando se haga el setBar lanzará un error con valor "quux".
	  });

	  it("throws the value", function() {
		expect(function() {
		  foo.setBar(123)
		}).toThrowError("quux");
	  });
	});
	
and.stub
--------
	No me acaba de quedar claro cómo funciona este espia.
	

================================	
Otras propiedades de seguimiento
================================

Cada llamada a un espía se recoje y expone en la propiedad 'calls'.

.calls.any() devuelve 'false' si el espía no ha sido llamado y 'true' una vez que al menos en una ocasión fue llamado.
	expect(foo.setBar.calls.any()).toEqual(false);
	
.calls.count() devuelve el número de veces que ha sido llamado el espía.
	expect(foo.setBar.calls.count()).toEqual(0);
	
.calls.argsFor(index) devuelve los argumentos pasados en la llamada número 'index'.

	it("tracks the arguments of each call", function() {
    foo.setBar(123);
    foo.setBar(456, "baz");

    expect(foo.setBar.calls.argsFor(0)).toEqual([123]);
    expect(foo.setBar.calls.argsFor(1)).toEqual([456, "baz"]);
  });
  
.calls.allArgs() devuelve los argumentos de todas las llamadas.
	
	foo.setBar(123);
    foo.setBar(456, "baz");

    expect(foo.setBar.calls.allArgs()).toEqual([[123],[456, "baz"]]);

.calls.all() devuelve el contexto(this) y los argumentos pasados a todas las llamadas.
	
	it("can provide the context and arguments to all calls", function() {
		foo.setBar(123);

		expect(foo.setBar.calls.all()).toEqual([{object: foo, args: [123], returnValue: undefined}]);
	});

.calls.mostRecent() devuelve el contexto de (this) y los argumentos de la llamada más reciente.

	it("has a shortcut to the most recent call", function() {
		foo.setBar(123);
		foo.setBar(456, "baz");
		
		expect(foo.setBar.calls.mostRecent()).toEqual({object: foo, args: [456, "baz"], returnValue: undefined});
	});

.calls.first() devuelve el contexto (this) y argumentos de la primera llamada.

	foo.setBar(123);
    foo.setBar(456, "baz");

    expect(foo.setBar.calls.first()).toEqual({object: foo, args: [123], returnValue: undefined});
	
.calls.reset() limpia todas las llamadas rastreadas de un espía.

	it("can be reset", function() {
    
		foo.setBar(123);
		foo.setBar(456, "baz");

		expect(foo.setBar.calls.any()).toBe(true);

		foo.setBar.calls.reset();

		expect(foo.setBar.calls.any()).toBe(false);
  });
  
  
createSpy -> Cuando no hay una función a la que espiar puede crearse un espía simple
Este espía actúa como cualquier otro capturando llamadas, argumentos, etc. pero sin una implementación bajo él.

	describe("A spy, when created manually", function() {
	  var whatAmI;

	  beforeEach(function() {
		whatAmI = jasmine.createSpy('whatAmI');

		whatAmI("I", "am", "a", "spy");
	  });

	  it("is named, which helps in error reporting", function() {
		expect(whatAmI.and.identity()).toEqual('whatAmI');
	  });

	  it("tracks that the spy was called", function() {
		expect(whatAmI).toHaveBeenCalled();
	  });

	  it("tracks its number of calls", function() {
		expect(whatAmI.calls.count()).toEqual(1);
	  });

	  it("tracks all the arguments of its calls", function() {
		expect(whatAmI).toHaveBeenCalledWith("I", "am", "a", "spy");
	  });

	  it("allows access to the most recent call", function() {
		expect(whatAmI.calls.mostRecent().args[0]).toEqual("I");
	  });
	});
	
createSpyObj -> Podemos crear un objeto mock con múltiples espías adjuntos mediante el uso de
jasmine.createSpyObj y pasándole un array de Strings. Devuelve un objeto que tiene una propiedad
para cada uno de los strings pasados al espía

	describe("Multiple spies, when created manually", function() {
	  var tape;

	  beforeEach(function() {
		tape = jasmine.createSpyObj('tape', ['play', 'pause', 'stop', 'rewind']);

		tape.play();
		tape.pause();
		tape.rewind(0);
	  });

	  it("creates spies for each requested function", function() {
		expect(tape.play).toBeDefined();
		expect(tape.pause).toBeDefined();
		expect(tape.stop).toBeDefined();
		expect(tape.rewind).toBeDefined();
	  });

	  it("tracks that the spies were called", function() {
		expect(tape.play).toHaveBeenCalled();
		expect(tape.pause).toHaveBeenCalled();
		expect(tape.rewind).toHaveBeenCalled();
		expect(tape.stop).not.toHaveBeenCalled();
	  });

	  it("tracks all the arguments of its calls", function() {
		expect(tape.rewind).toHaveBeenCalledWith(0);
	  });
	});
	
jasmine.any -> toma un constructor o nombre de clase como valor esperado.
Devuelve true si el constructor actual coincide con el constructor del valor actual.

	describe("jasmine.any", function() {
	  it("matches any value", function() {
		expect({}).toEqual(jasmine.any(Object));
		expect(12).toEqual(jasmine.any(Number));
	  });

	  describe("when used with a spy", function() {
		it("is useful for comparing arguments", function() {
		  var foo = jasmine.createSpy('foo');
		  foo(12, function() {
			return true;
		  });

		  expect(foo).toHaveBeenCalledWith(jasmine.any(Number), jasmine.any(Function));
		});
	  });
	});

jasmine.anything --> Devuelve true si el valor actual no es null ni undefined.
	describe("jasmine.anything", function() {
	  it("matches anything", function() {
		expect(1).toEqual(jasmine.anything());
	  });

	  describe("when used with a spy", function() {
		it("is useful when the argument can be ignored", function() {
		  var foo = jasmine.createSpy('foo');
		  foo(12, function() {
			return false;
		  });

		  expect(foo).toHaveBeenCalledWith(12, jasmine.anything());
		});
	  });
	});

jasmine.objectContaining --> Útil para aquellos casos en los que sólo importa que cumplan algunos pares clave/valor y no todo.

	describe("jasmine.objectContaining", function() {
	  var foo;

	  beforeEach(function() {
		foo = {
		  a: 1,
		  b: 2,
		  bar: "baz"
		};
	  });

	  it("matches objects with the expect key/value pairs", function() {
		expect(foo).toEqual(jasmine.objectContaining({
		  bar: "baz"
		}));
		expect(foo).not.toEqual(jasmine.objectContaining({
		  c: 37
		}));
	  });
	  
	describe("when used with a spy", function() {
	it("is useful for comparing arguments", function() {
		  var callback = jasmine.createSpy('callback');

		  callback({
			bar: "baz"
		  });

		  expect(callback).toHaveBeenCalledWith(jasmine.objectContaining({
			bar: "baz"
		  }));
		  expect(callback).not.toHaveBeenCalledWith(jasmine.objectContaining({
			c: 37
		  }));
		});
	  });
	});
	
jasmine.arrayContaining --> Útil para aquellos casos en los que sólo es necesario preocuparse
por ciertos valores de un Array.

	describe("jasmine.arrayContaining", function() {
	  var foo;

	  beforeEach(function() {
		foo = [1, 2, 3, 4];
	  });

	  it("matches arrays with some of the values", function() {
		expect(foo).toEqual(jasmine.arrayContaining([3, 1]));
		expect(foo).not.toEqual(jasmine.arrayContaining([6]));
	  });

	  describe("when used with a spy", function() {
		it("is useful when comparing arguments", function() {
		  var callback = jasmine.createSpy('callback');

		  callback([1, 2, 3, 4]);

		  expect(callback).toHaveBeenCalledWith(jasmine.arrayContaining([4, 2, 3]));
		  expect(callback).not.toHaveBeenCalledWith(jasmine.arrayContaining([5, 2]));
		});
	  });
	});
	
jasmine.stringMatching -> Para cuando no queremos que un string coincida exactamente con el string
de otro objeto, o sólo queremos que encaje una porción del string utilizando espías.

	describe('jasmine.stringMatching', function() {
	  it("matches as a regexp", function() {
		expect({foo: 'bar'}).toEqual({foo: jasmine.stringMatching(/^bar$/)});
		expect({foo: 'foobarbaz'}).toEqual({foo: jasmine.stringMatching('bar')});
	  });

	  describe("when used with a spy", function() {
		it("is useful for comparing arguments", function() {
		  var callback = jasmine.createSpy('callback');

		  callback('foobarbaz');

		  expect(callback).toHaveBeenCalledWith(jasmine.stringMatching('bar'));
		  expect(callback).not.toHaveBeenCalledWith(jasmine.stringMatching(/^bar$/));
		});
	  });
	});